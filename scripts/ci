#!/usr/bin/env bash

set -Eeuo pipefail
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
PROJECT_DIR=$( cd $SCRIPT_DIR/..; pwd)


OP=$1; shift

PLATUML_JAR=${PLANTUML_JAR:=${PROJECT_DIR}/lib/platuml.jar}
function prepare_plantuml(){
  find $PROJECT_DIR/content -type f \( -iname '*.puml' -o -iname '*.plantuml' \) | while read puml
  do
    filename=$(basename $puml)
    dest=${filename%.*}
    echo java -jar $PLANTUML_JAR -tpng -tsvg -o $dest  $puml
  done
}

function prepare(){
  prepare_plantuml
}
function deploy(){
  build
  publish
}
function build(){
  prepare
  hugo --minify --cleanDestinationDir -e firebase
  hugo --minify --cleanDestinationDir -e github
}
function publish(){
  firebase deploy --only hosting
}

function build-beta(){
  prepare
  hugo --minify --cleanDestinationDir -e firebase-beta
}
function publish-beta(){
  firebase deploy --only hosting:yogendra-me-beta
}

function deploy-beta(){
  build-beta
  publish-beta
}

function devcontainer-build(){
  SCOPE_DIR=${PROJECT_DIR}/.devcontainer
  DOCKERFILE=${SCOPE_DIR}/Dockerfile
  IMAGE_NAME=ghcr.io/yogendra/yogendra-me-devcontainer

  docker buildx build -t ${IMAGE_NAME}:latest-arm64 --platform=linux/arm64 -f ${DOCKERFILE} ${SCOPE_DIR}
  docker push ${IMAGE_NAME}:latest-arm64

  docker buildx build -t ${IMAGE_NAME}:latest-amd64 --platform=linux/amd64 -f ${DOCKERFILE} ${SCOPE_DIR}
  docker push ${IMAGE_NAME}:latest-amd64

  docker manifest create ${IMAGE_NAME}:latest \
    --amend ${IMAGE_NAME}:latest-arm64 \
    --amend ${IMAGE_NAME}:latest-amd64
  docker manifest push ${IMAGE_NAME}:latest
}

$OP $@
